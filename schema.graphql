type State @entity {
  id: ID!
  activeFunds: BigInt!
  nonActiveFunds: BigInt!
  timestampFundCount: BigInt!
  numberOfInvestors: BigInt!
  timestamptNumberOfInvestors: BigInt!
  lastCalculationId: BigInt!
  lastCalculation: BigInt!
}

type Registry @entity {
  id: ID!
  engine: Engine
  assets: [Asset!]!
  versions: [Version!]! @derivedFrom(field: "registry")
  funds: [Fund!]! @derivedFrom(field: "registry")
}

type Version @entity {
  id: ID!
  registry: Registry
  funds: [Fund!]! @derivedFrom(field: "version")
}

type Engine @entity {
  id: ID!
  registry: Registry
  amguPrices: [AmguPrice!]! @derivedFrom(field: "engine")
  amguPayments: [AmguPayment!]! @derivedFrom(field: "engine")
  etherThawings: [ThawEther!]! @derivedFrom(field: "engine")
  etherBurnings: [BurnEther!]! @derivedFrom(field: "engine")
}

type AmguPrice @entity {
  id: ID!
  engine: Engine!
  price: BigInt!
  timestamp: BigInt!
}

type AmguPayment @entity {
  id: ID!
  engine: Engine!
  amount: BigInt!
  timestamp: BigInt!
}

type ThawEther @entity {
  id: ID!
  engine: Engine!
  ether: BigInt!
  timestamp: BigInt!
}

type BurnEther @entity {
  id: ID!
  engine: Engine!
  ether: BigInt!
  timestamp: BigInt!
}

type Asset @entity {
  id: ID!
  decimals: Int!
  symbol: String!
  name: String!
  price: BigInt
  priceUpdates: [AssetPriceUpdate!]! @derivedFrom(field: "asset")
  lastPriceUpdate: BigInt
}

type AssetPriceUpdate @entity {
  id: ID!
  asset: Asset!
  price: BigInt!
  timestamp: BigInt!
}

type Fund @entity {
  id: ID!
  name: String!
  manager: String!
  creationTime: BigInt!
  isShutdown: Boolean!
  shutDownTime: BigInt
  accounting: Accounting!
  participation: Participation!
  feeManager: FeeManager!
  policyManager: PolicyManager!
  shares: Shares!
  trading: Trading!
  vault: Vault!
  registry: Registry!
  version: Version!
  engine: Engine!
  gav: BigInt
  feesInDenominationAsset: BigInt
  feesInShares: BigInt
  nav: BigInt
  sharePrice: BigInt
  gavPerShareNetManagementFee: BigInt
  allocatedFees: BigInt
  totalSupply: BigInt
  investments: [Investment!]! @derivedFrom(field: "fund")
  calculationsUpdates: [FundCalculationsUpdate!]! @derivedFrom(field: "fund")
  investmentLog: [InvestmentLog!]! @derivedFrom(field: "fund")
  holdingsLog: [FundHoldingsLog!]! @derivedFrom(field: "fund")
  lastCalculationsUpdate: BigInt
}

type FundCalculationsUpdate @entity {
  id: ID!
  fund: Fund!
  gav: BigInt!
  feesInDenominationAsset: BigInt
  feesInShares: BigInt
  nav: BigInt
  sharePrice: BigInt
  gavPerShareNetManagementFee: BigInt
  allocatedFees: BigInt
  totalSupply: BigInt
  timestamp: BigInt!
}

type FundCount @entity {
  id: ID!
  active: BigInt!
  nonActive: BigInt!
  timestamp: BigInt!
}

type InvestorCount @entity {
  id: ID!
  numberOfInvestors: BigInt!
  timestamp: BigInt!
}

type Accounting @entity {
  id: ID!
  fund: Fund!
  demoniationAsset: Asset!
  nativeAsset: Asset!
  ownedAssets: [Asset!]!
}

type Participation @entity {
  id: ID!
  fund: Fund!
  allowedAssets: [Asset!]!
  investmentRequests: [InvestmentRequest!]!
}

type FeeManager @entity {
  id: ID!
  fund: Fund!
}

type PolicyManager @entity {
  id: ID!
  fund: Fund!
}

type Policy @entity {
  id: ID!
  signature: String!
  position: Int!
  policy: String!
}

type Shares @entity {
  id: ID!
  fund: Fund!
}

type Trading @entity {
  id: ID!
  fund: Fund!
}

type Vault @entity {
  id: ID!
  fund: Fund!
}

# TODO: Add mappings.
type InvestmentRequest @entity {
  id: ID!
  fund: Fund!
}

type Investor @entity {
  id: ID!
  investments: [Investment!]! @derivedFrom(field: "owner")
  investmentLog: [InvestmentLog!]! @derivedFrom(field: "owner")
}

type Investment @entity {
  id: ID!
  fund: Fund!
  owner: Investor!
  shares: BigInt!
  sharePrice: BigInt!
  log: [InvestmentLog!]! @derivedFrom(field: "investment")
}

type InvestmentLog @entity {
  id: ID!
  timestamp: BigInt!
  investment: Investment!
  owner: Investor!
  fund: Fund!
  action: String!
  shares: BigInt!
  sharePrice: BigInt
}

type FundHoldingsLog @entity {
  id: ID!
  timestamp: BigInt!
  fund: Fund!
  asset: Asset!
  holding: BigInt!
}
